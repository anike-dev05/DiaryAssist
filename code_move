import random
import pandas as pd

# Step 1: Generate 10,000 accounts
num_accounts = 10000

# Generate random scores between 500 and 900
scores = [random.randint(500, 900) for _ in range(num_accounts)]

# Generate random good or bad flags
flags = [random.choice(['good', 'bad']) for _ in range(num_accounts)]

# Generate random balances
balances = [random.uniform(100, 10000) for _ in range(num_accounts)]

# Create a DataFrame for the accounts
accounts_df = pd.DataFrame({
    'score': scores,
    'flag': flags,
    'balance': balances
})

# Step 2: Sort accounts by score
accounts_df = accounts_df.sort_values(by='score')

# Step 3: Define a function to compute the bad balance of a subset of accounts
def calculate_bad_balance(df):
    return df[df['flag'] == 'bad']['balance'].sum()

# Step 4: Implement an algorithm to dynamically create score bands
bands = 5
total_bad_balance = calculate_bad_balance(accounts_df)
target_bad_balance_increment = total_bad_balance / ((bands * (bands + 1)) / 2)

current_idx = 0
score_bands = []
bad_balances = []

for i in range(1, bands + 1):
    target_bad_balance = i * target_bad_balance_increment
    current_bad_balance = 0
    
    while current_bad_balance < target_bad_balance and current_idx < len(accounts_df):
        current_bad_balance += accounts_df.iloc[current_idx]['balance'] if accounts_df.iloc[current_idx]['flag'] == 'bad' else 0
        current_idx += 1
    
    start_score = accounts_df.iloc[current_idx - 1]['score']
    end_score = accounts_df.iloc[current_idx]['score'] if current_idx < len(accounts_df) else 900
    
    score_bands.append((start_score, end_score))
    bad_balances.append(current_bad_balance)

# Combine bands and bad balances
band_balance_pairs = list(zip(score_bands, bad_balances))

print("Score bands with their bad balances:")
for band, balance in band_balance_pairs:
    print(f"Score band: {band[0]}-{band[1]}, Bad balance: {balance}")


.............

To find the accounts missing in one table compared to another, you can use a `LEFT JOIN` combined with a `WHERE` clause to identify rows that exist in one table but not in the other. Hereâ€™s a query for finding the accounts present in `table1` but missing in `table2`:

```sql
SELECT t1.account_id
FROM `project.dataset.table1` t1
LEFT JOIN `project.dataset.table2` t2
ON t1.account_id = t2.account_id
WHERE t2.account_id IS NULL
```

This query assumes that the account ID field is named `account_id` in both tables and that the tables are located in the same dataset. If the field names or dataset locations differ, adjust the query accordingly.