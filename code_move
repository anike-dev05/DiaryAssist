To identify the elbow point programmatically, you can analyze the rate of change (or the slope) of the curve. Here's a code snippet to automatically find the elbow point:

```python
def find_elbow_point(sse):
    # Calculate the differences between consecutive SSE values
    differences = np.diff(sse)
    
    # Calculate the second differences
    second_differences = np.diff(differences)
    
    # Find the index of the maximum second difference
    elbow_point_index = second_differences.argmax() + 1
    
    return elbow_point_index

# Assuming you already have the SSE values stored in the 'sse' list
elbow_point_index = find_elbow_point(sse)

# Plotting the elbow curve with the identified elbow point
plt.figure(figsize=(8, 6))
plt.plot(range(1, 11), sse, marker='o')
plt.plot(elbow_point_index + 1, sse[elbow_point_index], marker='o', markersize=10, label='Elbow Point', color='red')
plt.xlabel('Number of Clusters')
plt.ylabel('Sum of Squared Distances')
plt.title('Elbow Method')
plt.xticks(np.arange(1, 11, 1))
plt.grid(True)
plt.legend()
plt.show()

# Printing the identified number of clusters
print("The optimal number of clusters (elbow point) is:", elbow_point_index + 1)
```

In this code:
- We define a function `find_elbow_point()` that takes the list of SSE values and returns the index of the elbow point.
- Within the function, we calculate the differences between consecutive SSE values and then calculate the second differences.
- We find the index of the maximum second difference, which corresponds to the elbow point.
- We plot the elbow curve and mark the identified elbow point.
- Finally, we print the optimal number of clusters based on the elbow point.