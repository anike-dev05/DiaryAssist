Converting the provided SAS code to PySpark involves several steps. We need to:

1. Create a DataFrame equivalent to the `psi_band` data set.
2. Define a mapping function to replace the `proc format` and convert `gb_score` values based on defined ranges.
3. Apply the mapping to conditionally create the `PSI_BAND` column based on the `waterfall` column values.

Below is the PySpark equivalent of your SAS code:

```python
from pyspark.sql import SparkSession
from pyspark.sql.functions import col, when, lit

# Create a Spark session
spark = SparkSession.builder.appName("SAS to PySpark").getOrCreate()

# Sample data for psi_band DataFrame
psi_band_data = [
    ("Low-169",),
    ("170-197",),
    ("198-218",),
    ("219-236",),
    ("237-252",),
    ("253-268",),
    ("269-281",),
    ("282-293",),
    ("294-306",),
    ("307-High",)
]

psi_band_columns = ["SCOREBAND"]
psi_band_df = spark.createDataFrame(psi_band_data, psi_band_columns)

# Sample data for stab_psi DataFrame
stab_psi_data = [
    ("Score Rejects", 180.0),
    ("Stability Accepts", 250.0),
    ("Other Category", 300.0)
]

stab_psi_columns = ["waterfall", "gb_score"]
stab_psi_df = spark.createDataFrame(stab_psi_data, stab_psi_columns)

# Define a function to map gb_score to PSI_BAND based on defined ranges
def get_psi_band(score):
    if score <= 169:
        return "01:Low-169"
    elif 170 <= score <= 197:
        return "02:170-197"
    elif 198 <= score <= 218:
        return "03:198-218"
    elif 219 <= score <= 236:
        return "04:219-236"
    elif 237 <= score <= 252:
        return "05:237-252"
    elif 253 <= score <= 268:
        return "06:253-268"
    elif 269 <= score <= 281:
        return "07:269-281"
    elif 282 <= score <= 293:
        return "08:282-293"
    elif 294 <= score <= 306:
        return "09:294-306"
    elif score >= 307:
        return "10:307-HIGH"
    else:
        return None

# Register the function as a UDF
from pyspark.sql.functions import udf
from pyspark.sql.types import StringType

get_psi_band_udf = udf(get_psi_band, StringType())

# Apply the UDF conditionally to create PSI_BAND column
stab_psi_df = stab_psi_df.withColumn(
    "PSI_BAND",
    when(
        col("waterfall").isin("Score Rejects", "Stability Accepts"),
        get_psi_band_udf(col("gb_score"))
    ).otherwise(lit(None))
)

# Show the resulting DataFrame
stab_psi_df.show()
```

This code will:
1. Create a DataFrame for `psi_band` with the specified score bands.
2. Define a function to map `gb_score` values to the corresponding `PSI_BAND` based on the provided ranges.
3. Apply this function conditionally to the `stab_psi` DataFrame to create the `PSI_BAND` column only for rows where `waterfall` is either "Score Rejects" or "Stability Accepts".

You should adapt the sample data to match your actual data. The logic in the `get_psi_band` function and the condition in the `when` clause directly map to the functionality provided by the SAS code.